/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DirectorRole;

import Business.AccountPackage.Account;
import Business.ManagementEnterprise;
import Business.NetworkPackage.Network;
import Business.NewsGroupPackage.NewsGroup;
import Business.OrgPackage.DirectorOrganization;
import Business.Organization;
import Business.Work;
import Business.WorkPackage.EDWork;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sheldon
 */
public class DirectorWorkPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private NewsGroup business;
    private Account userAccount;
    private DirectorOrganization directorOrganization;

    /**
     * Creates new form DirectorWorkPanel
     * @param userProcessContainer
     * @param account
     * @param organization
     * @param business
     */
    public DirectorWorkPanel(JPanel userProcessContainer, Account account, Organization organization, NewsGroup business) {
        initComponents();
        this.setSize(970,620);
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.directorOrganization = (DirectorOrganization)organization;
        //valueLabel.setText();
        
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        directorOrganization.getWorkQueue().getWorkRequestList().stream().map((request) -> {
            Object[] row = new Object[5];
            EDWork r = (EDWork) request;
            row[0] = r;
            row[1] = r.getEditorialTitle();
            row[2] = r.getReceiver() == null ? "Waiting..." : r.getReceiver().getEmployee().getName();
            row[3] = r.isApprove();
            row[4] = r.getStatus() == null ? "Waiting..." : r.getStatus();
            return row;            
        }).forEach((row) -> {
            model.addRow(row);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();

        setOpaque(false);

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Report title", "Editorial title", "Receiver", "Approve", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        processJButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setEnabled(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        assignJButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignJButton)
                        .addGap(116, 116, 116)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(254, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(192, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Pleas select one work to continue");
            return;
        }

        EDWork request = (EDWork)workRequestJTable.getValueAt(selectedRow, 0);
        switch (request.getStatus()) {
            case "Pending...":
            case "Processing...":
            case "Declined":
                request.setStatus("Processing...");
                ApproveWorkPanel WorkPanel = new ApproveWorkPanel(userProcessContainer, userAccount, request, business);
                userProcessContainer.add("processWorkRequestJPanel", WorkPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                break;
            case "Completed and sent":
            case "Analyst":
                JOptionPane.showMessageDialog(null,"This work is completed!");
                break;
            default:
                JOptionPane.showMessageDialog(null,"You should take over this work first!");
                break;
        }

    }//GEN-LAST:event_processJButtonActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        
        Network nn = null;
        for(Network i : business.getNetworkList()){
        //for(Network i : NewsGroup.getInstance().getNetworkList()){
            if(i.getType().equals("Management")){
                nn = i;
                break;
            }
        }
        for (ManagementEnterprise b : nn.getManagementDirectory().getEnterpriseList()){
            Organization org = null;
            for (Organization organization : b.getOrganizationDirectory().getOrganizationList()){
            //String s = organization.getName();//leak DirectorOrganization
            if (organization instanceof DirectorOrganization){
                org = organization;
                break;
            }
        }

        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "All the information of this report would"
                + " be deleted", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_NO_OPTION){
                EDWork workselected = (EDWork) workRequestJTable.getValueAt(selectedRow, 0);//Wrong
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().remove(workselected);
                    userAccount.getWorkQueue().getWorkRequestList().remove(workselected);
                    populateTable();
                }
            }
        }else{
            JOptionPane.showMessageDialog(null,"Select one row", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Pleas select one work to continue");
            return;
        }

        Work request = (Work)workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null){
            request.setReceiver(userAccount);
            request.setStatus("Pending...");
            populateTable();
        } else JOptionPane.showMessageDialog(null,"This work has been assigned!");
    }//GEN-LAST:event_assignJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
